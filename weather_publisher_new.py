import logging
import requests
import asyncio
import os
import datetime
from typing import Dict, Any, List
from PIL import Image, ImageDraw, ImageFont
from telegram import Bot
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import yaml

font_cache: Dict[int, ImageFont.FreeTypeFont] = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENWEATHER_BASE_URL = "http://api.openweathermap.org/"

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
TEST_MODE = os.getenv("TEST_MODE", "False").lower() == "true"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏
WATERMARK_FILE = "watermark.png"
WATERMARK_SCALE_FACTOR = 0.5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫
AD_BUTTON_TEXT = "–ù–æ–≤–æ—Å—Ç–∏ üá∞üá≠"
AD_BUTTON_URL = "https://t.me/cambodiacriminal"
NEWS_BUTTON_TEXT = "–ü–æ–ø—Ä–æ–±—É–π! üÜï"
NEWS_BUTTON_URL = "https://bot.cambodiabank.ru"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ–Ω–∞–º–∏
BACKGROUNDS_FOLDER = "backgrounds2"

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_IDS_FILE = "message_ids.yml"

# --- –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ (–¥–ª—è TEST_MODE) ---
PRESET_WEATHER_DATA = {
    "–ü–Ω–æ–º–ø–µ–Ω—å": {
        'main': {'temp': 32.5, 'feels_like': 38.0, 'humidity': 65, 'pressure': 1009.5},
        'weather': [{'description': '—è—Å–Ω–æ'}],
        'wind': {'speed': 4.22, 'deg': 135} # Speed in m/s, deg for direction
    },
    "–°–∏–∞–Ω—É–∫–≤–∏–ª—å": {
        'main': {'temp': 28.1, 'feels_like': 31.5, 'humidity': 80, 'pressure': 1010.1},
        'weather': [{'description': '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å'}],
        'wind': {'speed': 3.0, 'deg': 270}
    },
    "–°–∏–µ–º—Ä–µ–∞–ø": {
        'main': {'temp': 30.0, 'feels_like': 35.5, 'humidity': 75, 'pressure': 1008.9},
        'weather': [{'description': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å'}],
        'wind': {'speed': 2.08, 'deg': 0}
    },
}

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ ---
def get_wind_direction_abbr(deg: int) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞."""
    directions = ["–°", "–°–°–í", "–°–í", "–í–°–í", "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í", "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó", "–ó", "–ó–°–ó", "–°–ó", "–°–°–ó"]
    index = round(deg / 22.5) % 16
    return directions[index]

async def get_coordinates(city_name: str, api_key: str) -> Dict[str, float] | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É) –¥–ª—è –≥–æ—Ä–æ–¥–∞."""
    if TEST_MODE:
        return {"lat": 0, "lon": 0} # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞

    url = f"{OPENWEATHER_BASE_URL}geo/1.0/direct"
    params = {
        "q": city_name,
        "limit": 1,
        "appid": api_key
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        if data:
            logger.info(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city_name}: {data[0]['lat']}, {data[0]['lon']}")
            return {"lat": data[0]["lat"], "lon": data[0]["lon"]}
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è: {city_name}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è {city_name}: {e}")
        return None

async def get_current_weather(coords: Dict[str, float], api_key: str, city_name_for_test: str) -> Dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."""
    if TEST_MODE:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {city_name_for_test}")
        return PRESET_WEATHER_DATA.get(city_name_for_test)

    if not coords:
        return None

    url = f"{OPENWEATHER_BASE_URL}data/2.5/weather"
    params = {
        "lat": coords["lat"],
        "lon": coords["lon"],
        "appid": api_key,
        "units": "metric",
        "lang": "ru"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coords['lat']}, {coords['lon']}")
        return data
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
        return None

def get_random_background_image(city_name: str) -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    city_folder = os.path.join(BACKGROUNDS_FOLDER, city_name)
    if os.path.isdir(city_folder):
        import random
        image_files = [f for f in os.listdir(city_folder) if os.path.isfile(os.path.join(city_folder, f)) and f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if image_files:
            return os.path.join(city_folder, random.choice(image_files))
    logger.warning(f"–ü–∞–ø–∫–∞ —Å —Ñ–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
    return None

def round_rectangle(draw, xy, radius, fill):
    x1, y1, x2, y2 = xy
    draw.rectangle((x1 + radius, y1, x2 - radius, y2), fill=fill)
    draw.rectangle((x1, y1 + radius, x2, y2 - radius), fill=fill)
    draw.pieslice((x1, y1, x1 + 2 * radius, y1 + 2 * radius), 180, 270, fill=fill)
    draw.pieslice((x2 - 2 * radius, y1, x2, y1 + 2 * radius), 270, 360, fill=fill)
    draw.pieslice((x1, y2 - 2 * radius, x1 + 2 * radius, y2), 90, 180, fill=fill)
    draw.pieslice((x2 - 2 * radius, y2 - 2 * radius, x2, y2), 0, 90, fill=fill)


def get_font(font_size: int) -> ImageFont.FreeTypeFont:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à—Ä–∏—Ñ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ."""
    if font_size in font_cache:
        return font_cache[font_size]
    try:
        font = ImageFont.truetype("arial.ttf", font_size)
        logger.info(f"–®—Ä–∏—Ñ—Ç 'arial.ttf' –∑–∞–≥—Ä—É–∂–µ–Ω (—Ä–∞–∑–º–µ—Ä {font_size}).")
    except IOError:
        logger.warning("–®—Ä–∏—Ñ—Ç 'arial.ttf' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.")
        font = ImageFont.load_default()
    font_cache[font_size] = font
    return font

def add_watermark(base_img: Image.Image) -> Image.Image:
    """–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤–æ—Ç–µ—Ä–º–∞—Ä–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    try:
        base_img = base_img.convert("RGBA")
        if not os.path.exists(WATERMARK_FILE):
            logger.warning(f"–§–∞–π–ª –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {WATERMARK_FILE}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            return base_img.convert("RGB")

        watermark_img = Image.open(WATERMARK_FILE).convert("RGBA")
        base_width, base_height = base_img.size

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        target_width = int(base_width * WATERMARK_SCALE_FACTOR)
        w_percent = (target_width / float(watermark_img.size[0]))
        h_size = int((float(watermark_img.size[1]) * float(w_percent)))
        watermark_img = watermark_img.resize((target_width, h_size), Image.Resampling.LANCZOS)

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        padding = int(base_width * 0.02)
        position = (base_width - watermark_img.width - padding, padding)

        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ
        transparent = Image.new('RGBA', base_img.size, (0,0,0,0))
        transparent.paste(base_img, (0,0))
        transparent.paste(watermark_img, position, mask=watermark_img)
        return transparent.convert("RGB")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏: {e}")
        return base_img.convert("RGB")


def create_weather_frame(city_name: str, weather_data: Dict) -> Image.Image | None:
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–¥—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–≥–æ–¥—ã."""
    background_path = get_random_background_image(city_name)
    if not background_path:
        return None

    try:
        img = Image.open(background_path).convert("RGB")
        width, height = img.size
        draw = ImageDraw.Draw(img)

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É OpenWeatherMap
        temp = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        weather_description = weather_data['weather'][0]['description'].capitalize()
        humidity = weather_data['main']['humidity']
        wind_speed_ms = weather_data['wind']['speed']
        wind_speed_kmh = wind_speed_ms * 3.6 # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º/—Å –≤ –∫–º/—á
        wind_deg = weather_data['wind']['deg']
        wind_direction_abbr = get_wind_direction_abbr(wind_deg)

        weather_text_lines = [
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥. {city_name}\n",
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C",
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C",
            f"{weather_description}",
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%",
            f"–í–µ—Ç–µ—Ä: {wind_direction_abbr}, {wind_speed_kmh:.1f} –∫–º/—á",
        ]
        weather_text = "\n".join(weather_text_lines)

        plaque_width = int(width * 0.9)
        padding = int(width * 0.04)
        border_radius = int(width * 0.03)
        font_size = int(width / 20) # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        font = get_font(font_size)

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
        text_bbox = draw.textbbox((0, 0), weather_text, font=font, spacing=10)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        plaque_height = text_height + 2 * padding

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–ª–∞—à–∫–∏
        plaque_x1 = (width - plaque_width) // 2
        plaque_y1 = (height - plaque_height) // 2
        plaque_x2 = plaque_x1 + plaque_width
        plaque_y2 = plaque_y1 + plaque_height

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –ø–ª–∞—à–∫—É
        plaque_img = Image.new('RGBA', img.size, (0,0,0,0))
        plaque_draw = ImageDraw.Draw(plaque_img)
        round_rectangle(plaque_draw, (plaque_x1, plaque_y1, plaque_x2, plaque_y2), border_radius, (0, 0, 0, 160))

        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞—à–∫–∏ –Ω–∞ —Ñ–æ–Ω
        img.paste(plaque_img, (0,0), plaque_img)
        draw = ImageDraw.Draw(img) # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º draw –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–∞
        text_x = plaque_x1 + (plaque_width - text_width) // 2
        text_y = plaque_y1 + (plaque_height - text_height) // 2
        draw.multiline_text((text_x, text_y), weather_text, fill=(255, 255, 255), font=font, spacing=10, align="center")

        return img

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–¥—Ä–∞ –¥–ª—è {city_name}: {e}")
        return None

def create_weather_gif(frames: List[Image.Image], output_path: str = "output/weather.gif") -> str:
    """–°–æ–∑–¥–∞–µ—Ç GIF-–∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ –∫–∞–¥—Ä–æ–≤."""
    if not frames:
        logger.error("–ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GIF.")
        return ""

    final_frames = []
    durations = []
    transition_steps = 15
    hold_duration = 3000
    blend_duration = 80
    num_frames = len(frames)

    for i in range(num_frames):
        current_frame = frames[i]
        next_frame = frames[(i + 1) % num_frames]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–¥—Ä —Å –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–π
        final_frames.append(add_watermark(current_frame.copy()))
        durations.append(hold_duration)

        # –°–æ–∑–¥–∞–µ–º –∫–∞–¥—Ä—ã –ø–µ—Ä–µ—Ö–æ–¥–∞
        for step in range(1, transition_steps + 1):
            alpha = step / transition_steps
            blended = Image.blend(current_frame, next_frame, alpha)
            final_frames.append(add_watermark(blended))
            durations.append(blend_duration)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º GIF
    final_frames[0].save(
        output_path,
        save_all=True,
        append_images=final_frames[1:],
        duration=durations,
        loop=0,
        optimize=True,
        disposal=2
    )
    logger.info(f"GIF-–∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
    return output_path

def save_message_id(message_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ YAML —Ñ–∞–π–ª."""
    messages = []
    if os.path.exists(MESSAGE_IDS_FILE):
        with open(MESSAGE_IDS_FILE, 'r') as f:
            try:
                loaded_data = yaml.safe_load(f)
                if isinstance(loaded_data, list):
                    messages = loaded_data
            except yaml.YAMLError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {MESSAGE_IDS_FILE}: {e}")

    messages.append({
        'message_id': message_id,
        'sent_at': datetime.datetime.now(datetime.timezone.utc).isoformat()
    })

    try:
        with open(MESSAGE_IDS_FILE, 'w') as f:
            yaml.dump(messages, f)
        logger.info(f"ID —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {MESSAGE_IDS_FILE}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    logger.info("--- –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ---")
    cities_to_publish = ["–ü–Ω–æ–º–ø–µ–Ω—å", "–°–∏–∞–Ω—É–∫–≤–∏–ª—å", "–°–∏–µ–º—Ä–µ–∞–ø"]

    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    openweather_api_key = os.getenv("OPENWEATHER_API_KEY") # <-- –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    target_chat_id = os.getenv("TARGET_CHAT_ID")

    if not all([telegram_bot_token, target_chat_id]) or (not TEST_MODE and not openweather_api_key):
        logger.error("–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (TELEGRAM_BOT_TOKEN, TARGET_CHAT_ID, OPENWEATHER_API_KEY).")
        return

    bot = Bot(token=telegram_bot_token)
    if not os.path.exists(BACKGROUNDS_FOLDER):
        os.makedirs(BACKGROUNDS_FOLDER)

    frames = []
    for city in cities_to_publish:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞: {city}...")
        coords = await get_coordinates(city, openweather_api_key)
        weather_data = await get_current_weather(coords, openweather_api_key, city)

        if weather_data:
            frame = create_weather_frame(city, weather_data)
            if frame:
                frames.append(frame)
        else:
            logger.warning(f"–ù–µ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API

    if not frames:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    gif_path = "weather_report.gif"
    create_weather_gif(frames, gif_path)

    if os.path.exists(gif_path):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(AD_BUTTON_TEXT, url=AD_BUTTON_URL),
             InlineKeyboardButton(NEWS_BUTTON_TEXT, url=NEWS_BUTTON_URL)]
        ])
        try:
            with open(gif_path, 'rb') as animation_file:
                message = await bot.send_animation(
                    chat_id=target_chat_id,
                    animation=animation_file,
                    reply_markup=keyboard,
                    disable_notification=True
                )
            save_message_id(message.message_id)
            logger.info(f"GIF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {target_chat_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
        finally:
            os.remove(gif_path) # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        logger.error("–§–∞–π–ª GIF –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")

    logger.info("--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ---")

if __name__ == "__main__":
    asyncio.run(main())
