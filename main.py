import logging
import requests
import asyncio
from telegram import Bot
import os
from typing import Dict, Any, List
from PIL import Image, ImageDraw, ImageFont # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Pillow
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL –¥–ª—è AccuWeather API
ACCUWEATHER_BASE_URL = "http://dataservice.accuweather.com/"

# --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
TEST_MODE = True  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, False –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API

# --- –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ ---
PRESET_WEATHER_DATA = {
    "–ü–Ω–æ–º–ø–µ–Ω—å": {
        "Temperature": {"Metric": {"Value": 32.5}},
        "RealFeelTemperature": {"Metric": {"Value": 38.0}},
        "WeatherText": "–°–æ–ª–Ω–µ—á–Ω–æ",
        "RelativeHumidity": 65,
        "Wind": {"Speed": {"Metric": {"Value": 15.2}}, "Direction": {"Localized": "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫"}},
        "Pressure": {"Metric": {"Value": 1009.5}},
    },
    "–°–∏–∞–Ω—É–∫–≤–∏–ª—å": {
        "Temperature": {"Metric": {"Value": 28.1}},
        "RealFeelTemperature": {"Metric": {"Value": 31.5}},
        "WeatherText": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        "RelativeHumidity": 80,
        "Wind": {"Speed": {"Metric": {"Value": 10.8}}, "Direction": {"Localized": "–ó–∞–ø–∞–¥"}},
        "Pressure": {"Metric": {"Value": 1010.1}},
    },
    "–°–∏–µ–º—Ä–µ–∞–ø": {
        "Temperature": {"Metric": {"Value": 30.0}},
        "RealFeelTemperature": {"Metric": {"Value": 35.5}},
        "WeatherText": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "RelativeHumidity": 75,
        "Wind": {"Speed": {"Metric": {"Value": 7.5}}, "Direction": {"Localized": "–°–µ–≤–µ—Ä"}},
        "Pressure": {"Metric": {"Value": 1008.9}},
    },
}

# --- –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ–Ω–∞–º–∏ ---
BACKGROUNDS_FOLDER = "backgrounds"

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ ---
WIND_DIRECTION_ABBR = {
    "–°–µ–≤–µ—Ä": "–°", "–°–í": "–°–í", "–í–æ—Å—Ç–æ–∫": "–í", "–Æ–í": "–Æ–í",
    "–Æ–≥": "–Æ", "–Æ–ó": "–Æ–ó", "–ó–∞–ø–∞–¥": "–ó", "–°–ó": "–°–ó",
    "–°–°–í": "–°–°–í", "–í–ù–í": "–í–ù–í", "–í–Æ–í": "–í–Æ–í", "–Æ–Æ–í": "–Æ–Æ–í",
    "–Æ–Æ–ó": "–Æ–Æ–ó", "–ó–Æ–ó": "–ó–Æ–ó", "–ó–°–ó": "–ó–°–ó", "–°–°–ó": "–°–°–ó",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π": "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π",
}

def get_wind_direction_abbr(direction_text: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞.
    """
    normalized_text = direction_text.strip()
    return WIND_DIRECTION_ABBR.get(normalized_text, direction_text)

async def get_location_key(city_name: str) -> str | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç Location Key AccuWeather –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    """
    if TEST_MODE:
        return "TEST_KEY" # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    url = f"{ACCUWEATHER_BASE_URL}locations/v1/cities/search"
    params = {
        "apikey": os.getenv("ACCUWEATHER_API_KEY"),
        "q": city_name,
        "language": "ru-ru"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        if data:
            logger.info(f"–ù–∞–π–¥–µ–Ω Location Key –¥–ª—è {city_name}: {data[0]['Key']} (TEST_MODE OFF)")
            return data[0]["Key"] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Location Key –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name} (TEST_MODE OFF)")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Location Key –¥–ª—è {city_name} –∫ AccuWeather API: {e} (TEST_MODE OFF)")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ,
# —á—Ç–æ–±—ã get_current_weather –º–æ–≥ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
city_to_process = ""

async def get_current_weather(location_key: str) -> Dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ Location Key.
    """
    if TEST_MODE:
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ location_key - —ç—Ç–æ "TEST_KEY",
        # –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é city_to_process –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if city_to_process in PRESET_WEATHER_DATA:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {city_to_process}")
            return PRESET_WEATHER_DATA.get(city_to_process)
        return None

    url = f"{ACCUWEATHER_BASE_URL}currentconditions/v1/{location_key}"
    params = {
        "apikey": os.getenv("ACCUWEATHER_API_KEY"),
        "language": "ru-ru",
        "details": "true"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        if data:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è Location Key: {location_key} (TEST_MODE OFF)")
            return data[0] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è Location Key: {location_key} (TEST_MODE OFF)")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è Location Key {location_key} –∫ AccuWeather API: {e} (TEST_MODE OFF)")
        return None

def get_random_background_image(city_name: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏)
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–∞–ø–∫–∏ –Ω–∞–∑–≤–∞–Ω—ã —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –≥–æ—Ä–æ–¥–∞ –≤ cities_to_publish
    city_folder = os.path.join(BACKGROUNDS_FOLDER, city_name)
    if os.path.isdir(city_folder):
        image_files = [f for f in os.listdir(city_folder) if os.path.isfile(os.path.join(city_folder, f)) and f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
        if image_files:
            return os.path.join(city_folder, random.choice(image_files))
    logger.warning(f"–ü–∞–ø–∫–∞ —Å —Ñ–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name} ({city_folder})")
    return None

def create_weather_image(city_name: str, weather_data: Dict) -> str | None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Ñ–æ–Ω–µ.
    """
    background_path = get_random_background_image(city_name)
    if not background_path:
        return None

    try:
        img = Image.open(background_path).convert("RGB")
        width, height = img.size

        # –°–æ–∑–¥–∞–µ–º –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—É—é –Ω–∞–∫–ª–∞–¥–∫—É
        # (0, 0, 0) - —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç, 128 - —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ (–æ—Ç 0 –¥–æ 255)
        overlay = Image.new('RGBA', img.size, (0, 0, 0, 128))
        img.paste(overlay, (0, 0), overlay) # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        draw = ImageDraw.Draw(img)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        font_size = int(height * 0.04) # 4% –æ—Ç –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç Arial.ttf. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π.
        # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Arial, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª 'arial.ttf' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç,
        # –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –Ω–µ–º—É. –ù–∞ Linux —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å '/usr/share/fonts/truetype/msttcorefonts/Arial.ttf'
        try:
            # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ Arial.ttf, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
            # –ù–∞–ø—Ä–∏–º–µ—Ä, font = ImageFont.truetype("/usr/share/fonts/truetype/msttcorefonts/Arial.ttf", font_size)
            font = ImageFont.truetype("arial.ttf", font_size, encoding="UTF-8")
        except IOError:
            font = ImageFont.load_default()
            logger.warning("–®—Ä–∏—Ñ—Ç 'arial.ttf' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç.")

        wind_direction_text = weather_data['Wind']['Direction']['Localized']
        wind_direction_abbr = get_wind_direction_abbr(wind_direction_text)
        pressure_kpa = weather_data['Pressure']['Metric']['Value'] * 0.1

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        weather_text_lines = [
            f"‚òÄÔ∏è –ü–æ–≥–æ–¥–∞ –≤ {city_name.capitalize()}:",
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['Temperature']['Metric']['Value']:.1f}¬∞C",
            f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['RealFeelTemperature']['Metric']['Value']:.1f}¬∞C",
            f"‚òÄÔ∏è/‚òÅÔ∏è {weather_data['WeatherText']}", # –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å–º–∞–π–ª –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['RelativeHumidity']}%",
            f"ü™Å –í–µ—Ç–µ—Ä: {wind_direction_abbr}, {weather_data['Wind']['Speed']['Metric']['Value']:.1f} –∫–º/—á",
            f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {pressure_kpa:.1f} –∫–ü–∞",
        ]
        weather_text = "\n".join(weather_text_lines)

        text_color = (255, 255, 255) # –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        text_x = int(width * 0.05)
        text_y = int(height * 0.1)

        # –†–∏—Å—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        draw.multiline_text((text_x, text_y), weather_text, fill=text_color, font=font, spacing=10) # spacing - –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

        output_path = f"weather_{city_name.lower().replace(' ', '_')}.png"
        img.save(output_path)
        return output_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {city_name}: {e}")
        return None

async def format_and_send_weather(bot: Bot, city_name: str, weather_data: Dict, target_chat_id: str):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram.
    """
    image_path = create_weather_image(city_name, weather_data)
    if image_path:
        try:
            with open(image_path, 'rb') as photo:
                await bot.send_photo(chat_id=target_chat_id, photo=photo)
            os.remove(image_path) # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {city_name}: {e}")
            await bot.send_message(chat_id=target_chat_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name}.", parse_mode='HTML')
    else:
        await bot.send_message(chat_id=target_chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name}.", parse_mode='HTML')

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞.
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–ø–µ—Ä—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).
    """
    global city_to_process # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ get_current_weather (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    cities_to_publish = ["–ü–Ω–æ–º–ø–µ–Ω—å", "–°–∏–∞–Ω—É–∫–≤–∏–ª—å", "–°–∏–µ–º—Ä–µ–∞–ø"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    accuweather_api_key = os.getenv("ACCUWEATHER_API_KEY")
    target_chat_id = os.getenv("TARGET_CHAT_ID")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (API-–∫–ª—é—á –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ TEST_MODE=False)
    if not all([telegram_bot_token, target_chat_id]) or (not TEST_MODE and not accuweather_api_key):
        logger.error("–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
                     "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_BOT_TOKEN –∏ TARGET_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        if not TEST_MODE and not accuweather_api_key:
            logger.error("ACCUWEATHER_API_KEY —Ç–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º, –∫–æ–≥–¥–∞ TEST_MODE=False.")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã —Ç–æ–∫–µ–Ω –∏ chat_id –¥–æ—Å—Ç—É–ø–Ω—ã
        if telegram_bot_token and target_chat_id:
            bot = Bot(token=telegram_bot_token)
            await bot.send_message(chat_id=target_chat_id,
                                   text="‚ùå <b>–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞!</b> –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API-–∫–ª—é—á–∏ –∏–ª–∏ ID —á–∞—Ç–∞.",
                                   parse_mode='HTML')
        return

    bot = Bot(token=telegram_bot_token)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backgrounds –∏ –ø–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(BACKGROUNDS_FOLDER):
        os.makedirs(BACKGROUNDS_FOLDER)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤: {BACKGROUNDS_FOLDER}")
    for city in cities_to_publish:
        city_folder = os.path.join(BACKGROUNDS_FOLDER, city)
        if not os.path.exists(city_folder):
            os.makedirs(city_folder)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤ –≥–æ—Ä–æ–¥–∞: {city_folder}")
    
    logger.warning(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–∞—Ö '{BACKGROUNDS_FOLDER}/<–ù–∞–∑–≤–∞–Ω–∏–µ–ì–æ—Ä–æ–¥–∞>' –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–æ–Ω–æ–≤.")


    # –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    for city in cities_to_publish:
        city_to_process = city # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        logger.info(f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {city}...")
        
        weather_data = None
        if TEST_MODE:
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞–ø—Ä—è–º—É—é –±–µ—Ä–µ–º –∏–∑ PRESET_WEATHER_DATA
            weather_data = PRESET_WEATHER_DATA.get(city)
            if not weather_data:
                logger.error(f"–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º Location Key, –∑–∞—Ç–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
            location_key = await get_location_key(city)
            if location_key:
                weather_data = await get_current_weather(location_key)
            else:
                await bot.send_message(chat_id=target_chat_id,
                                       text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Location Key –¥–ª—è –≥–æ—Ä–æ–¥–∞ <b>{city}</b>.",
                                       parse_mode='HTML')
                continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–æ—Ä–æ–¥—É, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –ø–æ–ª—É—á–µ–Ω

        if weather_data:
            await format_and_send_weather(bot, city, weather_data, target_chat_id)
        else:
            await bot.send_message(chat_id=target_chat_id,
                                   text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è <b>{city}</b>.",
                                   parse_mode='HTML')

        await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

if __name__ == "__main__":
    asyncio.run(main())
