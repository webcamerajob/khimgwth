import logging
import requests
import asyncio
import os
import datetime
from typing import Dict, Any, List, Optional
from PIL import Image, ImageDraw, ImageFont
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
import yaml

font_cache: Dict[int, ImageFont.FreeTypeFont] = {}
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ONE_CALL_API_URL = "https://api.openweathermap.org/data/3.0/onecall"
CITIES = {
    "–ü–Ω–æ–º–ø–µ–Ω—å": {"lat": 11.5564, "lon": 104.9282},
    "–°–∏–∞–Ω—É–∫–≤–∏–ª—å": {"lat": 10.6276, "lon": 103.5224},
    "–°–∏–µ–º—Ä–µ–∞–ø": {"lat": 13.3639, "lon": 103.859}
}
TEST_MODE = os.getenv("TEST_MODE", "False").lower() == "true"
WATERMARK_FILE = "watermark.png"
WATERMARK_SCALE_FACTOR = 0.5
AD_BUTTON_TEXT = "–ù–æ–≤–æ—Å—Ç–∏ üá∞üá≠"
AD_BUTTON_URL = "https://t.me/cambodiacriminal"
NEWS_BUTTON_TEXT = "–ü–æ–ø—Ä–æ–±—É–π! üÜï"
NEWS_BUTTON_URL = "https://bot.cambodiabank.ru"
BACKGROUNDS_FOLDER = "backgrounds2"
MESSAGE_IDS_FILE = "message_ids.yml"

# --- –§—É–Ω–∫—Ü–∏–∏ ---

async def get_current_weather(coords: Dict[str, float], api_key: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ One Call API."""
    params = {
        "lat": coords["lat"],
        "lon": coords["lon"],
        "appid": api_key,
        "units": "metric",
        "lang": "ru",
        "exclude": "minutely,hourly,daily,alerts"
    }
    try:
        response = requests.get(ONE_CALL_API_URL, params=params)
        response.raise_for_status()
        data = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coords['lat']}, {coords['lon']}")
        return data
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ One Call API: {e}")
        return None

def create_weather_frame(city_name: str, weather_data: Dict) -> Optional[Image.Image]:
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–¥—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–≥–æ–¥—ã."""
    background_path = get_random_background_image(city_name)
    if not background_path:
        return None

    try:
        img = Image.open(background_path).convert("RGB")
        
        target_width = 640
        w_percent = (target_width / float(img.size[0]))
        h_size = int((float(img.size[1]) * float(w_percent)))
        img = img.resize((target_width, h_size), Image.Resampling.LANCZOS)
        
        current_weather = weather_data['current']
        width, height = img.size
        draw = ImageDraw.Draw(img)

        temp = current_weather['temp']
        feels_like = current_weather['feels_like']
        weather_description = current_weather['weather'][0]['description'].capitalize()
        humidity = current_weather['humidity']
        wind_speed_ms = current_weather['wind_speed'] # API —É–∂–µ –¥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –º/—Å
        wind_deg = current_weather['wind_deg']
        wind_direction_abbr = get_wind_direction_abbr(wind_deg)

        weather_text_lines = [
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥. {city_name}\n",
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C",
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like:.1f}¬∞C",
            f"{weather_description}",
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%",
            f"–í–µ—Ç–µ—Ä: {wind_direction_abbr}, {wind_speed_ms:.1f} –º/—Å", # <-- –ò–ó–ú–ï–ù–ï–ù–û
        ]

        weather_text = "\n".join(weather_text_lines)
        
        plaque_width = int(width * 0.9)
        padding = int(width * 0.04)
        border_radius = int(width * 0.03)
        font_size = int(width / 20)
        font = get_font(font_size)
        text_bbox = draw.textbbox((0, 0), weather_text, font=font, spacing=10)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        plaque_height = text_height + 2 * padding
        plaque_x1 = (width - plaque_width) // 2
        plaque_y1 = (height - plaque_height) // 2
        plaque_x2 = plaque_x1 + plaque_width
        plaque_y2 = plaque_y1 + plaque_height
        plaque_img = Image.new('RGBA', img.size, (0,0,0,0))
        plaque_draw = ImageDraw.Draw(plaque_img)
        round_rectangle(plaque_draw, (plaque_x1, plaque_y1, plaque_x2, plaque_y2), border_radius, (0, 0, 0, 160))
        img.paste(plaque_img, (0,0), plaque_img)
        draw = ImageDraw.Draw(img)
        text_x = plaque_x1 + (plaque_width - text_width) // 2
        text_y = plaque_y1 + (plaque_height - text_height) // 2
        draw.multiline_text((text_x, text_y), weather_text, fill=(255, 255, 255), font=font, spacing=10, align="center")

        return img

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–¥—Ä–∞ –¥–ª—è {city_name}: {e}")
        return None

def get_wind_direction_abbr(deg: int) -> str:
    directions = ["–°", "–°–°–í", "–°–í", "–í–°–í", "–í", "–í–Æ–í", "–Æ–í", "–Æ–Æ–í", "–Æ", "–Æ–Æ–ó", "–Æ–ó", "–ó–Æ–ó", "–ó", "–ó–°–ó", "–°–ó", "–°–°–ó"]
    index = round(deg / 22.5) % 16
    return directions[index]

def get_random_background_image(city_name: str) -> str | None:
    city_folder = os.path.join(BACKGROUNDS_FOLDER, city_name)
    if os.path.isdir(city_folder):
        import random
        image_files = [f for f in os.listdir(city_folder) if os.path.isfile(os.path.join(city_folder, f)) and f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if image_files:
            return os.path.join(city_folder, random.choice(image_files))
    logger.warning(f"–ü–∞–ø–∫–∞ —Å —Ñ–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
    return None

def round_rectangle(draw, xy, radius, fill):
    x1, y1, x2, y2 = xy
    draw.rectangle((x1 + radius, y1, x2 - radius, y2), fill=fill)
    draw.rectangle((x1, y1 + radius, x2, y2 - radius), fill=fill)
    draw.pieslice((x1, y1, x1 + 2 * radius, y1 + 2 * radius), 180, 270, fill=fill)
    draw.pieslice((x2 - 2 * radius, y1, x2, y1 + 2 * radius), 270, 360, fill=fill)
    draw.pieslice((x1, y2 - 2 * radius, x1 + 2 * radius, y2), 90, 180, fill=fill)
    draw.pieslice((x2 - 2 * radius, y2 - 2 * radius, x2, y2), 0, 90, fill=fill)

def get_font(font_size: int) -> ImageFont.FreeTypeFont:
    if font_size in font_cache:
        return font_cache[font_size]
    try:
        font = ImageFont.truetype("arial.ttf", font_size)
    except IOError:
        font = ImageFont.load_default()
    font_cache[font_size] = font
    return font

def add_watermark(base_img: Image.Image) -> Image.Image:
    try:
        base_img = base_img.convert("RGBA")
        if not os.path.exists(WATERMARK_FILE):
            return base_img.convert("RGB")
        watermark_img = Image.open(WATERMARK_FILE).convert("RGBA")
        base_width, base_height = base_img.size
        target_width = int(base_width * WATERMARK_SCALE_FACTOR)
        w_percent = (target_width / float(watermark_img.size[0]))
        h_size = int((float(watermark_img.size[1]) * float(w_percent)))
        watermark_img = watermark_img.resize((target_width, h_size), Image.Resampling.LANCZOS)
        padding = int(base_width * 0.02)
        position = (base_width - watermark_img.width - padding, padding)
        transparent = Image.new('RGBA', base_img.size, (0,0,0,0))
        transparent.paste(base_img, (0,0))
        transparent.paste(watermark_img, position, mask=watermark_img)
        return transparent.convert("RGB")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏: {e}")
        return base_img.convert("RGB")

def create_weather_gif(frames: List[Image.Image], output_path: str = "output/weather.gif") -> str:
    if not frames:
        logger.error("–ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GIF.")
        return ""
    final_frames = []
    transition_steps = 15
    hold_duration = 3000
    blend_duration = 100
    num_colors = 128
    num_frames = len(frames)
    for i in range(num_frames):
        current_frame = frames[i]
        next_frame = frames[(i + 1) % num_frames]
        base_with_watermark = add_watermark(current_frame.copy())
        quantized_frame = base_with_watermark.quantize(colors=num_colors, method=Image.Quantize.MEDIANCUT)
        final_frames.append(quantized_frame)
        for step in range(1, transition_steps + 1):
            alpha = step / transition_steps
            blended = Image.blend(current_frame, next_frame, alpha)
            blended_with_watermark = add_watermark(blended)
            quantized_blended = blended_with_watermark.quantize(colors=num_colors, method=Image.Quantize.MEDIANCUT)
            final_frames.append(quantized_blended)
    durations = []
    for i in range(num_frames):
        durations.append(hold_duration)
        durations.extend([blend_duration] * transition_steps)
    final_frames[0].save(
        output_path,
        save_all=True,
        append_images=final_frames[1:],
        duration=durations,
        loop=0,
        optimize=True,
        disposal=2
    )
    logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GIF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
    return output_path

def save_message_id(message_id: int):
    messages = []
    if os.path.exists(MESSAGE_IDS_FILE):
        with open(MESSAGE_IDS_FILE, 'r') as f:
            try:
                loaded_data = yaml.safe_load(f)
                if isinstance(loaded_data, list):
                    messages = loaded_data
            except yaml.YAMLError:
                pass
    messages.append({'message_id': message_id, 'sent_at': datetime.datetime.now(datetime.timezone.utc).isoformat()})
    with open(MESSAGE_IDS_FILE, 'w') as f:
        yaml.dump(messages, f)

async def main():
    logger.info("--- –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ---")
    openweather_api_key = os.getenv("OPENWEATHER_API_KEY")
    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    target_chat_id = os.getenv("TARGET_CHAT_ID")

    if not all([telegram_bot_token, target_chat_id, openweather_api_key]):
        logger.error("–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    bot = Bot(token=telegram_bot_token)
    frames = []

    for city_name, coords in CITIES.items():
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞: {city_name}...")
        
        weather_data = await get_current_weather(coords, openweather_api_key)

        if weather_data:
            frame = create_weather_frame(city_name, weather_data) # <-- –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
            if frame:
                frames.append(frame)
        else:
            logger.warning(f"–ù–µ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city_name}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        
        await asyncio.sleep(0.5)

    if not frames:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    gif_path = "weather_report.gif"
    create_weather_gif(frames, gif_path)
    if os.path.exists(gif_path):
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(AD_BUTTON_TEXT, url=AD_BUTTON_URL), InlineKeyboardButton(NEWS_BUTTON_TEXT, url=NEWS_BUTTON_URL)]])
        try:
            with open(gif_path, 'rb') as animation_file:
                message = await bot.send_animation(chat_id=target_chat_id, animation=animation_file, reply_markup=keyboard, disable_notification=True)
            save_message_id(message.message_id)
            logger.info(f"GIF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {target_chat_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
        finally:
            if os.path.exists(gif_path):
                os.remove(gif_path)
    else:
        logger.error("–§–∞–π–ª GIF –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
    logger.info("--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ---")

if __name__ == "__main__":
    if os.name == 'nt':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
