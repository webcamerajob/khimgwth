import logging
import requests
import asyncio
import os
import datetime
from typing import Dict, Any, List
from PIL import Image, ImageDraw, ImageFont
from telegram import Bot
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import yaml  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PyYAML

font_cache: Dict[int, ImageFont.FreeTypeFont] = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ACCUWEATHER_BASE_URL = "http://dataservice.accuweather.com/"

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–º–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–∑ YML —á–µ—Ä–µ–∑ env var TEST_MODE)
TEST_MODE = os.getenv("TEST_MODE", "False").lower() == "true"  # –ß–∏—Ç–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏
WATERMARK_FILE = "watermark.png"  # –ò–º—è —Ñ–∞–π–ª–∞ –≤–∞—à–µ–π –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
WATERMARK_SCALE_FACTOR = 0.5  # –ú–∞—Å—à—Ç–∞–± –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.25 –æ–∑–Ω–∞—á–∞–µ—Ç 25% –æ—Ç —à–∏—Ä–∏–Ω—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫
AD_BUTTON_TEXT = "–ù–æ–≤–æ—Å—Ç–∏ üá∞üá≠"
AD_BUTTON_URL = "https://t.me/cambodiacriminal"
NEWS_BUTTON_TEXT = "–ù–µ —Ç—Ä–æ–≥–∞—Ç—å! üÜï"
NEWS_BUTTON_URL = "https://bot.cambodiabank.ru"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ–Ω–∞–º–∏
BACKGROUNDS_FOLDER = "backgrounds2"

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_IDS_FILE = "message_ids.yml"

# --- –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ (–¥–ª—è TEST_MODE) ---
PRESET_WEATHER_DATA = {
    "–ü–Ω–æ–º–ø–µ–Ω—å": {
        "Temperature": {"Metric": {"Value": 32.5}},
        "RealFeelTemperature": {"Metric": {"Value": 38.0}},
        "WeatherText": "–°–æ–ª–Ω–µ—á–Ω–æ",
        "RelativeHumidity": 65,
        "Wind": {"Speed": {"Metric": {"Value": 15.2}}, "Direction": {"Localized": "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫"}},
        "Pressure": {"Metric": {"Value": 1009.5}},
    },
    "–°–∏–∞–Ω—É–∫–≤–∏–ª—å": {
        "Temperature": {"Metric": {"Value": 28.1}},
        "RealFeelTemperature": {"Metric": {"Value": 31.5}},
        "WeatherText": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        "RelativeHumidity": 80,
        "Wind": {"Speed": {"Metric": {"Value": 10.8}}, "Direction": {"Localized": "–ó–∞–ø–∞–¥"}},
        "Pressure": {"Metric": {"Value": 1010.1}},
    },
    "–°–∏–µ–º—Ä–µ–∞–ø": {
        "Temperature": {"Metric": {"Value": 30.0}},
        "RealFeelTemperature": {"Metric": {"Value": 35.5}},
        "WeatherText": "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "RelativeHumidity": 75,
        "Wind": {"Speed": {"Metric": {"Value": 7.5}}, "Direction": {"Localized": "–°–µ–≤–µ—Ä"}},
        "Pressure": {"Metric": {"Value": 1008.9}},
    },
}

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞ ---
WIND_DIRECTION_ABBR = {
    "–°–µ–≤–µ—Ä": "–°", "–°–í": "–°–í", "–í–æ—Å—Ç–æ–∫": "–í", "–Æ–í": "–Æ–í",
    "–Æ–≥": "–Æ", "–Æ–ó": "–Æ–ó", "–ó–∞–ø–∞–¥": "–ó", "–°–ó": "–°–ó",
    "–°–°–í": "–°–°–í", "–í–ù–í": "–í–ù–í", "–í–Æ–í": "–í–Æ–í", "–Æ–Æ–í": "–Æ–Æ–í",
    "–Æ–Æ–ó": "–Æ–Æ–ó", "–ó–Æ–ó": "–ó–Æ–ó", "–ó–°–ó": "–ó–°–ó", "–°–°–ó": "–°–°–ó",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π": "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π",
    "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫": "–Æ–í",  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥": "–°–ó",  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫": "–°–í",  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    "–Æ–≥–æ-–∑–∞–ø–∞–¥": "–Æ–ó",  # –î–æ–±–∞–≤–ª–µ–Ω–æ
}

def get_wind_direction_abbr(direction_text: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞.
    """
    normalized_text = direction_text.strip()
    return WIND_DIRECTION_ABBR.get(normalized_text, direction_text)

async def get_location_key(city_name: str) -> str | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç Location Key AccuWeather –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    """
    if TEST_MODE:
        return "TEST_KEY"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    url = f"{ACCUWEATHER_BASE_URL}locations/v1/cities/search"
    params = {
        "apikey": os.getenv("ACCUWEATHER_API_KEY"),
        "q": city_name,
        "language": "ru-ru"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        if data and isinstance(data, list) and len(data) > 0:  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: AccuWeather API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫,
            # –∏ –∫–ª—é—á –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞.
            logger.info(f"–ù–∞–π–¥–µ–Ω Location Key –¥–ª—è {city_name}: {data[0]['Key']} (TEST_MODE OFF)")
            return data[0]["Key"]  # –î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Location Key –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name} (TEST_MODE OFF)")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Location Key –¥–ª—è {city_name} –∫ AccuWeather API: {e} (TEST_MODE OFF)")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ,
# —á—Ç–æ–±—ã get_current_weather –º–æ–≥ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
city_to_process = ""

async def get_current_weather(location_key: str) -> Dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ Location Key.
    """
    if TEST_MODE:
        if city_to_process in PRESET_WEATHER_DATA:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {city_to_process}")
            return PRESET_WEATHER_DATA.get(city_to_process)
        return None

    url = f"{ACCUWEATHER_BASE_URL}currentconditions/v1/{location_key}"
    params = {
        "apikey": os.getenv("ACCUWEATHER_API_KEY"),
        "language": "ru-ru",
        "details": "true"
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        if data and isinstance(data, list) and len(data) > 0:  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: AccuWeather API –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫,
            # –∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞.
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è Location Key: {location_key} (TEST_MODE OFF)")
            return data[0]  # –î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Å–ø–∏—Å–∫–∞
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è Location Key: {location_key} (TEST_MODE OFF)")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è Location Key {location_key} –∫ AccuWeather API: {e} (TEST_MODE OFF)")
        return None

def get_random_background_image(city_name: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    """
    city_folder = os.path.join(BACKGROUNDS_FOLDER, city_name)
    if os.path.isdir(city_folder):
        import random  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º random –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ
        image_files = [f for f in os.listdir(city_folder) if os.path.isfile(os.path.join(city_folder, f)) and f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
        if image_files:
            return os.path.join(city_folder, random.choice(image_files))
    logger.warning(f"–ü–∞–ø–∫–∞ —Å —Ñ–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name} ({city_folder})")
    return None

def round_rectangle(draw, xy, radius, fill):
    x1, y1, x2, y2 = xy
    draw.rectangle((x1 + radius, y1, x2 - radius, y2), fill=fill)
    draw.rectangle((x1, y1 + radius, x2, y2 - radius), fill=fill)
    draw.ellipse((x1, y1, x1 + radius * 2, y1 + radius * 2), fill=fill)
    draw.ellipse((x2 - radius * 2, y1, x2, y1 + radius * 2), fill=fill)
    draw.ellipse((x1, y2 - radius * 2, x1 + radius * 2, y2), fill=fill)
    draw.ellipse((x2 - radius * 2, y2 - radius * 2, x2, y2), fill=fill)

def get_font(font_size: int) -> ImageFont.FreeTypeFont:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à—Ä–∏—Ñ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ —Å –¥–∏—Å–∫–∞.
    """
    if font_size in font_cache:
        return font_cache[font_size]

    try:
        font = ImageFont.truetype("arial.ttf", font_size, encoding="UTF-8")
        logger.info(f"–®—Ä–∏—Ñ—Ç 'arial.ttf' –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä {font_size}).")
    except IOError:
        logger.warning("–®—Ä–∏—Ñ—Ç 'arial.ttf' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å 'DejaVuSans.ttf'.")
        try:
            font = ImageFont.truetype("DejaVuSans.ttf", font_size, encoding="UTF-8")
            logger.info(f"–®—Ä–∏—Ñ—Ç 'DejaVuSans.ttf' –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä {font_size}).")
        except IOError:
            logger.warning("–û–±–∞ —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç Pillow.")
            font = ImageFont.load_default()
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 'DejaVuSans.ttf': {e}")
            font = ImageFont.load_default()
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 'arial.ttf': {e}")
        font = ImageFont.load_default()

    font_cache[font_size] = font
    return font

def add_watermark(base_img: Image.Image) -> Image.Image:
    """
    –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤–æ—Ç–µ—Ä–º–∞—Ä–∫—É –∏–∑ 'watermark.png' –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–±—ä–µ–∫—Ç Image).
    –í–æ—Ç–µ—Ä–º–∞—Ä–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Image —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–π.
    """
    try:
        base_img = base_img.convert("RGBA")  # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        base_width, base_height = base_img.size

        watermark_path = WATERMARK_FILE
        if not os.path.exists(watermark_path):
            logger.warning(f"–§–∞–π–ª –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {watermark_path}. –í–æ—Ç–µ—Ä–º–∞—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return base_img  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        watermark_img = Image.open(watermark_path).convert("RGBA")

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏
        target_width = int(base_width * WATERMARK_SCALE_FACTOR)
        target_height = int(watermark_img.height * (target_width / watermark_img.width))
        watermark_img = watermark_img.resize((target_width, target_height), Image.Resampling.LANCZOS)

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        padding = int(base_width * 0.02)
        position = (base_width - watermark_img.width - padding, padding)

        # –ù–æ–≤—ã–π –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ª–æ–π –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        overlay = Image.new("RGBA", base_img.size, (0, 0, 0, 0))
        overlay.paste(watermark_img, position, mask=watermark_img)

        # –ö–æ–º–ø–æ–∑–∏—Ü–∏—è
        result = Image.alpha_composite(base_img, overlay)

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏: {e}")
        return base_img  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∏

def create_weather_frame(city_name: str, weather_data: Dict) -> Image.Image | None:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–¥—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GIF-–∞–Ω–∏–º–∞—Ü–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Image.
    """
    background_path = get_random_background_image(city_name)
    if not background_path:
        return None

    try:
        img = Image.open(background_path).convert("RGB")
        width, height = img.size
        draw = ImageDraw.Draw(img)

        wind_direction_text = weather_data['Wind']['Direction']['Localized']
        wind_direction_abbr = get_wind_direction_abbr(wind_direction_text)

        weather_text_lines = [
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥. {city_name}\n",
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['Temperature']['Metric']['Value']:.1f}¬∞C",
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['RealFeelTemperature']['Metric']['Value']:.1f}¬∞C",
            f"{weather_data['WeatherText']}",
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['RelativeHumidity']}%",
            f"–í–µ—Ç–µ—Ä: {wind_direction_abbr}, {weather_data['Wind']['Speed']['Metric']['Value']:.1f} –∫–º/—á",
        ]
        weather_text = "\n".join(weather_text_lines)

        plaque_width = int(width * 0.85)
        padding = int(width * 0.03)
        border_radius = int(width * 0.02)

        font = get_font(48)

        left, top, right, bottom = draw.textbbox((0, 0), weather_text, font=font, spacing=10)
        text_width = right - left
        text_height = bottom - top
        plaque_height = text_height + 2 * padding

        plaque_x1 = (width - plaque_width) // 2
        plaque_y1 = (height - plaque_height) // 2
        plaque_x2 = plaque_x1 + plaque_width
        plaque_y2 = plaque_y1 + plaque_height

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ª–æ–π
        plaque_img = Image.new('RGBA', img.size, (0, 0, 0, 0))
        plaque_draw = ImageDraw.Draw(plaque_img)
        round_rectangle(plaque_draw, (plaque_x1, plaque_y1, plaque_x2, plaque_y2), border_radius, (0, 0, 0, 150))

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        img = img.convert("RGBA")  # –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–º –≤ RGBA
        img = Image.alpha_composite(img, plaque_img).convert("RGB")  # —Å–Ω–æ–≤–∞ –≤ RGB
        draw = ImageDraw.Draw(img)  # –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç draw –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

        text_x = plaque_x1 + (plaque_width - text_width) // 2
        text_y = plaque_y1 + (plaque_height - text_height) // 2
        draw.multiline_text((text_x, text_y), weather_text, fill=(255, 255, 255), font=font, spacing=10, align="center")

        return img

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–¥—Ä–∞ –¥–ª—è {city_name}: {e}")
        return None

def create_weather_gif(frames: List[Image.Image], output_path: str = "output/weather.gif") -> str:
    if not frames:
        logger.error("–ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GIF.")
        return ""

    final_frames = []
    durations = []

    transition_steps = 12       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –º–µ–∂–¥—É —Å–ª–∞–π–¥–∞–º–∏
    hold_duration = 3000        # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–¥—Ä–µ
    blend_duration = 100       # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å blended-–∫–∞–¥—Ä–æ–≤

    num_frames = len(frames)

    for i in range(num_frames):
        base = frames[i]
        next_frame = frames[(i + 1) % num_frames]

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–¥—Ä ‚Äî —Å –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–æ–º
        base_with_watermark = add_watermark(base.copy())  # <- —Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        final_frames.append(base_with_watermark)
        durations.append(hold_duration)

        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ blended-–∫–∞–¥—Ä—ã –±–µ–∑ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–∞, –¥–æ–±–∞–≤–∏–º –µ–≥–æ –ø–æ—Ç–æ–º
        for step in range(1, transition_steps):
            alpha = step / transition_steps
            blended = Image.blend(base, next_frame, alpha)
            blended_with_watermark = add_watermark(blended)
            final_frames.append(blended_with_watermark)
            durations.append(blend_duration)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GIF
    final_frames[0].save(
        output_path,
        save_all=True,
        append_images=final_frames[1:],
        duration=durations,
        loop=0,
        optimize=False,
        disposal=2
    )

    logger.info(f"GIF-–∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
    return output_path

def save_message_id(message_id: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ YAML —Ñ–∞–π–ª.
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = []  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if os.path.exists(MESSAGE_IDS_FILE):
            with open(MESSAGE_IDS_FILE, 'r') as f:
                try:
                    loaded_data = yaml.safe_load(f)
                    if isinstance(loaded_data, list):
                        messages = loaded_data
                    else:
                        logger.warning(f"–§–∞–π–ª {MESSAGE_IDS_FILE} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.")
                except yaml.YAMLError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ YAML —Ñ–∞–π–ª–∞ {MESSAGE_IDS_FILE}: {e}. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_time_utc = datetime.datetime.now(datetime.timezone.utc)
        messages.append({
            'message_id': message_id,
            'sent_at': current_time_utc.isoformat()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ (UTC)
        })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        with open(MESSAGE_IDS_FILE, 'w') as f:
            yaml.dump(messages, f, default_flow_style=False)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ ID {message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {MESSAGE_IDS_FILE}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —Ñ–∞–π–ª: {e}")
        
# --- –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å main ---
async def main():
    print("DEBUG: --- –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ main() ---")
    global city_to_process
    cities_to_publish = ["–ü–Ω–æ–º–ø–µ–Ω—å", "–°–∏–∞–Ω—É–∫–≤–∏–ª—å", "–°–∏–µ–º—Ä–µ–∞–ø"]

    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    accuweather_api_key = os.getenv("ACCUWEATHER_API_KEY")
    target_chat_id = os.getenv("TARGET_CHAT_ID")

    if not all([telegram_bot_token, target_chat_id]) or (not TEST_MODE and not accuweather_api_key):
        logger.error("–û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    bot = Bot(token=telegram_bot_token)
    if not os.path.exists(BACKGROUNDS_FOLDER):
        os.makedirs(BACKGROUNDS_FOLDER)

    frames = []

    for city in cities_to_publish:
        city_to_process = city
        logger.info(f"–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {city}...")

        weather_data = PRESET_WEATHER_DATA.get(city) if TEST_MODE else None
        if not TEST_MODE:
            location_key = await get_location_key(city)
            weather_data = await get_current_weather(location_key) if location_key else None

        if weather_data:
            frame = create_weather_frame(city, weather_data)
            if frame:
                frames.append(frame)
        else:
            logger.warning(f"–ù–µ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {city}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")

        await asyncio.sleep(0.5)

    gif_path = "weather_report.gif"
    gif_result = create_weather_gif(frames, gif_path)

    if gif_result and os.path.exists(gif_path):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(AD_BUTTON_TEXT, url=AD_BUTTON_URL),
             InlineKeyboardButton(NEWS_BUTTON_TEXT, url=NEWS_BUTTON_URL)]
        ])

        try:
            with open(gif_path, 'rb') as f:
                message = await bot.send_animation(
                    chat_id=target_chat_id,
                    animation=f,
                    caption=None,
                    reply_markup=keyboard,
                    disable_notification=True
                )
                save_message_id(message.message_id)
                logger.info(f"GIF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {gif_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
    else:
        await bot.send_message(chat_id=target_chat_id,
                               text="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–≥–æ–¥—ã.",
                               parse_mode='HTML')

    # –û—á–∏—Å—Ç–∫–∞
    try:
        if os.path.exists(gif_path):
            os.remove(gif_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ GIF: {e}")

    print("DEBUG: --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ main() ---")

if __name__ == "__main__":
    asyncio.run(main())
