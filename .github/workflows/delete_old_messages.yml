name: Delete Old Weather Messages # Название рабочего процесса

on:
  schedule:
    # Запускать каждый час в начале часа. 
    # Это позволяет регулярно проверять и удалять сообщения,
    # которые достигли порога удаления (например, 3 часа).
    - cron: '55 * * * *' 
  workflow_dispatch: # Позволяет запускать рабочий процесс вручную из интерфейса GitHub

jobs:
  delete:
    runs-on: ubuntu-latest # Виртуальная машина, на которой будет выполняться задача
    
    steps:
    - name: Checkout repository # Шаг 1: Клонировать ваш репозиторий
      uses: actions/checkout@v4

    - name: Set up Python # Шаг 2: Настроить среду Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Указываем версию Python

    - name: Install dependencies # Шаг 3: Установить необходимые библиотеки
      run: |
        pip install python-telegram-bot httpx # Устанавливаем библиотеки для взаимодействия с Telegram

    - name: Run Delete Old Messages Script # Шаг 4: Запустить отдельный Python-скрипт
      env:
        # Передаем секрет токена Telegram-бота из настроек репозитория.
        # Убедитесь, что TELEGRAM_BOT_TOKEN добавлен в Secrets вашего репозитория.
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
        # Имя файла, в котором хранятся ID сообщений для удаления.
        # Должно совпадать с переменной MESSAGES_TO_DELETE_FILE в weather_publisher.py.
        MESSAGES_TO_DELETE_FILE_NAME: messages_to_delete.json 
        
        # Время задержки перед удалением сообщений в часах.
        # Должно совпадать с переменной DELETE_AFTER_HOURS в weather_publisher.py.
        DELETE_AFTER_HOURS_SETTING: 3
      run: | # <-- Это критическая строка. Содержимое скрипта должно быть выровнено под ней.
        python delete_messages_script.py # <-- Теперь это *единственное*, что находится на этом уровне отступа.
