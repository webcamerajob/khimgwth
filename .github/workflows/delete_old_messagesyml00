name: Delete Old Weather Messages # Название рабочего процесса

on:
  schedule:
    # Запускать каждый час в начале часа. 
    - cron: '0 * * * *' 
  workflow_dispatch: # Позволяет запускать рабочий процесс вручную из интерфейса GitHub
  push: # Триггер на push, но только для конкретного файла
    branches:
      - main # Укажите вашу основную ветку (например, master)
    paths:
      - 'messages_to_delete.json' # Этот воркфлоу будет срабатывать, если этот файл меняется

jobs:
  delete:
    runs-on: ubuntu-latest # Виртуальная машина, на которой будет выполняться задача
    
    # Отменяем предыдущие запуски, если они ещё выполняются.
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository # Шаг 1: Клонировать ваш репозиторий
      uses: actions/checkout@v4
      with:
        # Важно: передаем токен для корректной работы Git-операций (коммиты/пуши)
        token: ${{ secrets.GITHUB_TOKEN }} 

    - name: Set up Python # Шаг 2: Настроить среду Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # Указываем версию Python

    - name: Install dependencies # Шаг 3: Установить необходимые библиотеки
      run: |
        pip install python-telegram-bot httpx # Устанавливаем библиотеки для взаимодействия с Telegram

    - name: Run Delete Old Messages Script # Шаг 4: Запустить отдельный Python-скрипт
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        MESSAGES_TO_DELETE_FILE_NAME: messages_to_delete.json 
        DELETE_AFTER_HOURS_SETTING: 3
        # Передаём GITHUB_TOKEN в скрипт, чтобы он мог делать коммиты
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      run: | 
        python delete_messages_script.py # Запускаем созданный Python-файл
